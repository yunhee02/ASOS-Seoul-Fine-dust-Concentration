# -*- coding: utf-8 -*-
"""ASOS와 (초)미세먼지 농도 비교와 상관관계

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VIr2FfXEh6QK94zAzNrE3T-lyian1QC0

**연도별 평균 미세먼지 농도 비교**
"""

import pandas as pd
import matplotlib.pyplot as plt

# ASOS 데이터 불러오기
asos_data = pd.read_csv("/content/merged_file(Asos).csv")

# 서울특별시 미세먼지 데이터 불러오기
seoul_pm_data = pd.read_csv("/content/merged_file(2020-2022 all utf-8 1).csv")

# 필요한 열만 선택
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)']]

# 두 데이터를 날짜(Date)를 기준으로 병합
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# '일시' 열에서 연도 정보 추출
merged_data['연도'] = pd.to_datetime(merged_data['일시']).dt.year

# 연도별 평균 미세먼지 농도 계산
average_pm10_per_year = merged_data.groupby('연도')['미세먼지(PM10)'].mean().reset_index()

# 연도별 평균 미세먼지 농도 시각화
plt.figure(figsize=(10, 6))
plt.bar(average_pm10_per_year['연도'], average_pm10_per_year['미세먼지(PM10)'], color='skyblue')

plt.xlabel('Year')
plt.ylabel('Average Fine Dust (PM10)')
plt.title('Average Fine Dust (PM10) by Year')
plt.xticks(average_pm10_per_year['연도'])

plt.tight_layout()
plt.show()

"""**연도별 초미세먼지 평균 농도 비교**"""

import pandas as pd
import matplotlib.pyplot as plt

# ASOS 데이터 불러오기
asos_data = pd.read_csv("/content/merged_file(Asos).csv")

# 서울특별시 초미세먼지 데이터 불러오기
seoul_pm_data = pd.read_csv("/content/merged_file(2020-2022 all utf-8 1).csv")

# 필요한 열만 선택
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)']]

# 두 데이터를 날짜(Date)를 기준으로 병합
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# '일시' 열에서 연도 정보 추출
merged_data['연도'] = pd.to_datetime(merged_data['일시']).dt.year

# 연도별 평균 초미세먼지 농도 계산
average_pm25_per_year = merged_data.groupby('연도')['초미세먼지(PM2.5)'].mean().reset_index()

# 연도별 평균 초미세먼지 농도 시각화
plt.figure(figsize=(10, 6))
plt.bar(average_pm25_per_year['연도'], average_pm25_per_year['초미세먼지(PM2.5)'], color='skyblue')

plt.xlabel('Year')
plt.ylabel('Average Ultrafine Dust (PM2.5)')
plt.title('Average Ultrafine Dust (PM2.5) by Year')
plt.xticks(average_pm25_per_year['연도'])

plt.tight_layout()
plt.show()

"""**7월과 12월의 평균 미세먼지 농도 비교**"""

import pandas as pd
import matplotlib.pyplot as plt

# ASOS 데이터 불러오기
asos_data = pd.read_csv("/content/merged_file(Asos).csv")

# 서울특별시 미세먼지 데이터 불러오기
seoul_pm_data = pd.read_csv("/content/specific_month_data(3,7,10,12).csv")

# 필요한 열만 선택
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)']]

# 두 데이터를 날짜(Date)를 기준으로 병합
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# '일시' 열에서 월 정보 추출
merged_data['월'] = pd.to_datetime(merged_data['일시']).dt.month

# 필요한 월만 선택
july_dec_data = merged_data[(merged_data['월'] == 7) | (merged_data['월'] == 12)]

# 7월과 12월 평균 미세먼지 농도 계산
mean_pm10_july = july_dec_data[july_dec_data['월'] == 7]['미세먼지(PM10)'].mean()
mean_pm10_december = july_dec_data[july_dec_data['월'] == 12]['미세먼지(PM10)'].mean()

# 평균 미세먼지 농도를 막대 그래프로 시각화
months = ['July', 'December']
mean_pm10_values = [mean_pm10_july, mean_pm10_december]

plt.bar(months, mean_pm10_values, color=['blue', 'red'])
plt.xlabel('Month')
plt.ylabel('Average Fine Dust (PM10)')
plt.title('Average Fine Dust (PM10) Comparison: July vs December')

# 각 막대에 평균값 표시
for i, value in enumerate(mean_pm10_values):
    plt.text(i, value + 1, f'{value:.2f}', ha='center')

plt.show()

"""**3월과 10월의 평균 미세먼지 농도 비교**"""

import pandas as pd
import matplotlib.pyplot as plt

# ASOS 데이터 불러오기
asos_data = pd.read_csv("/content/merged_file(Asos).csv")

# 서울특별시 미세먼지 데이터 불러오기
seoul_pm_data = pd.read_csv("/content/specific_month_data(3,7,10,12).csv")

# 필요한 열만 선택
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)']]

# 두 데이터를 날짜(Date)를 기준으로 병합
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# '일시' 열에서 월 정보 추출
merged_data['월'] = pd.to_datetime(merged_data['일시']).dt.month

# 필요한 월만 선택
march_oct_data = merged_data[(merged_data['월'] == 3) | (merged_data['월'] == 10)]

# 3월과 10월 평균 미세먼지 농도 계산
mean_pm10_march = march_oct_data[march_oct_data['월'] == 3]['미세먼지(PM10)'].mean()
mean_pm10_october = march_oct_data[march_oct_data['월'] == 10]['미세먼지(PM10)'].mean()

# 평균 미세먼지 농도를 막대 그래프로 시각화
months = ['March', 'October']
mean_pm10_values = [mean_pm10_march, mean_pm10_october]

plt.bar(months, mean_pm10_values, color=['green', 'orange'])
plt.xlabel('Month')
plt.ylabel('Average Fine Dust (PM10)')
plt.title('Average Fine Dust (PM10) Comparison: March vs October')

# 각 막대에 평균값 표시
for i, value in enumerate(mean_pm10_values):
    plt.text(i, value + 1, f'{value:.2f}', ha='center')

plt.show()

"""**연도별 미세먼지 농도 비교**"""

import pandas as pd
import matplotlib.pyplot as plt

# ASOS 데이터 불러오기
asos_data = pd.read_csv("/content/merged_file(Asos).csv")

# 서울특별시 미세먼지 데이터 불러오기
seoul_pm_data = pd.read_csv("/content/merged_file(2020-2022 all utf-8 1).csv")

# 필요한 열만 선택
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)']]

# 두 데이터를 날짜(Date)를 기준으로 병합
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# '일시' 열에서 연도 정보 추출
merged_data['연도'] = pd.to_datetime(merged_data['일시']).dt.year

# 연도별로 데이터 분리
years = [2020, 2021, 2022]
yearly_data = {year: merged_data[merged_data['연도'] == year] for year in years}

# 연도별 미세먼지 농도 비교
plt.figure(figsize=(10, 6))
for year in years:
    plt.bar(yearly_data[year]['연도'], yearly_data[year]['미세먼지(PM10)'], label=str(year))

plt.xlabel('Year')
plt.ylabel('Fine Dust (PM10)')
plt.title('Fine Dust (PM10) Comparison by Year')
plt.legend(title='Year', loc='upper left')
plt.tight_layout()
plt.show()

"""**지역별 초미세먼지 농도 비교**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 서울특별시 초미세먼지 데이터 불러오기 (복사본 파일 사용)
seoul_pm_data = pd.read_csv("/content/merged_file(2020-2022 all utf-8 1) - 복사본.csv")

# 지역별 초미세먼지(PM2.5) 평균 계산
region_pm25_data = seoul_pm_data.groupby('구분')['초미세먼지(PM2.5)'].mean().reset_index()

# 시각화
plt.figure(figsize=(12, 6))
sns.barplot(data=region_pm25_data, x='구분', y='초미세먼지(PM2.5)', palette="magma")
plt.xticks(rotation=90)
plt.xlabel('Region')
plt.ylabel('Average PM2.5')
plt.title('Average PM2.5 by Region')
plt.show()

"""**지역별 미세먼지 농도 비교**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 서울특별시 미세먼지 데이터 불러오기 (복사본 파일 사용)
seoul_pm_data = pd.read_csv("/content/merged_file(2020-2022 all utf-8 1) - 복사본.csv")

# 지역별 미세먼지(PM10) 평균 계산
region_pm10_data = seoul_pm_data.groupby('구분')['미세먼지(PM10)'].mean().reset_index()

# 시각화
plt.figure(figsize=(12, 6))
sns.barplot(data=region_pm10_data, x='구분', y='미세먼지(PM10)', palette="viridis")
plt.xticks(rotation=90)
plt.xlabel('Region')
plt.ylabel('Average PM10')
plt.title('Average PM10 by Region')
plt.show()

"""**기온, 강수량, 습도, 풍속에 따른 미세먼지와 초미세먼지별 농도 비교**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 필요한 데이터 선택 (습도, 풍속이 포함되어 있다고 가정)
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '습도(%)', '풍속(m/s)']]
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# 미세먼지(PM10) 농도에 따른 산점도 그래프
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
sns.scatterplot(data=merged_data, x='기온(°C)', y='미세먼지(PM10)', ax=axes[0, 0])
axes[0, 0].set_title('PM10 vs Temperature')
axes[0, 0].set_xlabel('Temperature (°C)')
axes[0, 0].set_ylabel('PM10 Concentration')

sns.scatterplot(data=merged_data, x='강수량(mm)', y='미세먼지(PM10)', ax=axes[0, 1])
axes[0, 1].set_title('PM10 vs Rainfall')
axes[0, 1].set_xlabel('Rainfall (mm)')
axes[0, 1].set_ylabel('PM10 Concentration')

sns.scatterplot(data=merged_data, x='습도(%)', y='미세먼지(PM10)', ax=axes[1, 0])
axes[1, 0].set_title('PM10 vs Humidity')
axes[1, 0].set_xlabel('Humidity (%)')
axes[1, 0].set_ylabel('PM10 Concentration')

sns.scatterplot(data=merged_data, x='풍속(m/s)', y='미세먼지(PM10)', ax=axes[1, 1])
axes[1, 1].set_title('PM10 vs Wind Speed')
axes[1, 1].set_xlabel('Wind Speed (m/s)')
axes[1, 1].set_ylabel('PM10 Concentration')

plt.tight_layout()
plt.show()

# 초미세먼지(PM2.5) 농도에 따른 산점도 그래프
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
sns.scatterplot(data=merged_data, x='기온(°C)', y='초미세먼지(PM2.5)', ax=axes[0, 0])
axes[0, 0].set_title('PM2.5 vs Temperature')
axes[0, 0].set_xlabel('Temperature (°C)')
axes[0, 0].set_ylabel('PM2.5 Concentration')

sns.scatterplot(data=merged_data, x='강수량(mm)', y='초미세먼지(PM2.5)', ax=axes[0, 1])
axes[0, 1].set_title('PM2.5 vs Rainfall')
axes[0, 1].set_xlabel('Rainfall (mm)')
axes[0, 1].set_ylabel('PM2.5 Concentration')

sns.scatterplot(data=merged_data, x='습도(%)', y='초미세먼지(PM2.5)', ax=axes[1, 0])
axes[1, 0].set_title('PM2.5 vs Humidity')
axes[1, 0].set_xlabel('Humidity (%)')
axes[1, 0].set_ylabel('PM2.5 Concentration')

sns.scatterplot(data=merged_data, x='풍속(m/s)', y='초미세먼지(PM2.5)', ax=axes[1, 1])
axes[1, 1].set_title('PM2.5 vs Wind Speed')
axes[1, 1].set_xlabel('Wind Speed (m/s)')
axes[1, 1].set_ylabel('PM2.5 Concentration')

plt.tight_layout()
plt.show()

"""**평균 기온 강수량, 습도, 풍속에 따른 미세먼지와 초미세먼지별 농도 비교**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 필요한 데이터 선택 (습도, 풍속이 포함되어 있다고 가정)
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '습도(%)', '풍속(m/s)']]
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# 평균값 계산
mean_data = merged_data.groupby(['기온(°C)', '강수량(mm)', '습도(%)', '풍속(m/s)']).agg({
    '미세먼지(PM10)': 'mean',
    '초미세먼지(PM2.5)': 'mean'
}).reset_index()

# 미세먼지(PM10) 평균 농도에 따른 산점도 그래프
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
sns.scatterplot(data=mean_data, x='기온(°C)', y='미세먼지(PM10)', ax=axes[0, 0])
axes[0, 0].set_title('Average PM10 vs Temperature')
axes[0, 0].set_xlabel('Temperature (°C)')
axes[0, 0].set_ylabel('Average PM10 Concentration')

sns.scatterplot(data=mean_data, x='강수량(mm)', y='미세먼지(PM10)', ax=axes[0, 1])
axes[0, 1].set_title('Average PM10 vs Rainfall')
axes[0, 1].set_xlabel('Rainfall (mm)')
axes[0, 1].set_ylabel('Average PM10 Concentration')

sns.scatterplot(data=mean_data, x='습도(%)', y='미세먼지(PM10)', ax=axes[1, 0])
axes[1, 0].set_title('Average PM10 vs Humidity')
axes[1, 0].set_xlabel('Humidity (%)')
axes[1, 0].set_ylabel('Average PM10 Concentration')

sns.scatterplot(data=mean_data, x='풍속(m/s)', y='미세먼지(PM10)', ax=axes[1, 1])
axes[1, 1].set_title('Average PM10 vs Wind Speed')
axes[1, 1].set_xlabel('Wind Speed (m/s)')
axes[1, 1].set_ylabel('Average PM10 Concentration')

plt.tight_layout()
plt.show()

# 초미세먼지(PM2.5) 평균 농도에 따른 산점도 그래프
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
sns.scatterplot(data=mean_data, x='기온(°C)', y='초미세먼지(PM2.5)', ax=axes[0, 0])
axes[0, 0].set_title('Average PM2.5 vs Temperature')
axes[0, 0].set_xlabel('Temperature (°C)')
axes[0, 0].set_ylabel('Average PM2.5 Concentration')

sns.scatterplot(data=mean_data, x='강수량(mm)', y='초미세먼지(PM2.5)', ax=axes[0, 1])
axes[0, 1].set_title('Average PM2.5 vs Rainfall')
axes[0, 1].set_xlabel('Rainfall (mm)')
axes[0, 1].set_ylabel('Average PM2.5 Concentration')

sns.scatterplot(data=mean_data, x='습도(%)', y='초미세먼지(PM2.5)', ax=axes[1, 0])
axes[1, 0].set_title('Average PM2.5 vs Humidity')
axes[1, 0].set_xlabel('Humidity (%)')
axes[1, 0].set_ylabel('Average PM2.5 Concentration')

sns.scatterplot(data=mean_data, x='풍속(m/s)', y='초미세먼지(PM2.5)', ax=axes[1, 1])
axes[1, 1].set_title('Average PM2.5 vs Wind Speed')
axes[1, 1].set_xlabel('Wind Speed (m/s)')
axes[1, 1].set_ylabel('Average PM2.5 Concentration')

plt.tight_layout()
plt.show()

"""**기온, 강수량, 습도, 풍속에 따른 미세먼지와 초미세먼지별 농도 상관관계**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 데이터 병합 (습도, 풍속이 포함되어 있다고 가정)
asos_data = asos_data[['일시', '기온(°C)', '강수량(mm)', '습도(%)', '풍속(m/s)']]
merged_data = pd.merge(asos_data, seoul_pm_data, on='일시')

# PM10과 관련된 상관관계 계산
corr_data_pm10 = merged_data[['기온(°C)', '강수량(mm)', '습도(%)', '풍속(m/s)', '미세먼지(PM10)']]
correlation_matrix_pm10 = corr_data_pm10.corr()

# PM2.5와 관련된 상관관계 계산
corr_data_pm25 = merged_data[['기온(°C)', '강수량(mm)', '습도(%)', '풍속(m/s)', '초미세먼지(PM2.5)']]
correlation_matrix_pm25 = corr_data_pm25.corr()

# PM10 상관관계 히트맵 시각화
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix_pm10, annot=True, cmap='coolwarm', fmt=".2f",
            xticklabels=['Temperature (°C)', 'Rainfall (mm)', 'Humidity (%)', 'Wind Speed (m/s)', 'PM10'],
            yticklabels=['Temperature (°C)', 'Rainfall (mm)', 'Humidity (%)', 'Wind Speed (m/s)', 'PM10'])
plt.title('Correlation between Weather Factors and PM10')
plt.show()

# PM2.5 상관관계 히트맵 시각화
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix_pm25, annot=True, cmap='coolwarm', fmt=".2f",
            xticklabels=['Temperature (°C)', 'Rainfall (mm)', 'Humidity (%)', 'Wind Speed (m/s)', 'PM2.5'],
            yticklabels=['Temperature (°C)', 'Rainfall (mm)', 'Humidity (%)', 'Wind Speed (m/s)', 'PM2.5'])
plt.title('Correlation between Weather Factors and PM2.5')
plt.show()